/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as IndexImport } from "./routes/index";
import { Route as FunctionsIndexImport } from "./routes/functions/index";
import { Route as FunctionsIdeImport } from "./routes/functions/ide";

// Create/Update Routes

const IndexRoute = IndexImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => rootRoute
} as any);

const FunctionsIndexRoute = FunctionsIndexImport.update({
    id: "/functions/",
    path: "/functions/",
    getParentRoute: () => rootRoute
} as any);

const FunctionsIdeRoute = FunctionsIdeImport.update({
    id: "/functions/ide",
    path: "/functions/ide",
    getParentRoute: () => rootRoute
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            id: "/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof IndexImport;
            parentRoute: typeof rootRoute;
        };
        "/functions/ide": {
            id: "/functions/ide";
            path: "/functions/ide";
            fullPath: "/functions/ide";
            preLoaderRoute: typeof FunctionsIdeImport;
            parentRoute: typeof rootRoute;
        };
        "/functions/": {
            id: "/functions/";
            path: "/functions";
            fullPath: "/functions";
            preLoaderRoute: typeof FunctionsIndexImport;
            parentRoute: typeof rootRoute;
        };
    }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
    "/": typeof IndexRoute;
    "/functions/ide": typeof FunctionsIdeRoute;
    "/functions": typeof FunctionsIndexRoute;
}

export interface FileRoutesByTo {
    "/": typeof IndexRoute;
    "/functions/ide": typeof FunctionsIdeRoute;
    "/functions": typeof FunctionsIndexRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    "/": typeof IndexRoute;
    "/functions/ide": typeof FunctionsIdeRoute;
    "/functions/": typeof FunctionsIndexRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths: "/" | "/functions/ide" | "/functions";
    fileRoutesByTo: FileRoutesByTo;
    to: "/" | "/functions/ide" | "/functions";
    id: "__root__" | "/" | "/functions/ide" | "/functions/";
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute;
    FunctionsIdeRoute: typeof FunctionsIdeRoute;
    FunctionsIndexRoute: typeof FunctionsIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    FunctionsIdeRoute: FunctionsIdeRoute,
    FunctionsIndexRoute: FunctionsIndexRoute
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/functions/ide",
        "/functions/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/functions/ide": {
      "filePath": "functions/ide.tsx"
    },
    "/functions/": {
      "filePath": "functions/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
